diff -ruN src_tmp/veripb/optimized/parsing.cpp veripb/veripb/optimized/parsing.cpp
--- src_tmp/veripb/optimized/parsing.cpp	2022-02-05 16:49:57.001823500 +0100
+++ veripb/veripb/optimized/parsing.cpp	2022-02-05 16:49:49.696857500 +0100
@@ -959,6 +959,7 @@
 };
 
 
+
 template<typename T>
 std::unique_ptr<Formula<T>> parseOpb(std::string fileName, VariableNameManager& varMgr) {
     std::ifstream f(fileName);
@@ -982,6 +983,14 @@
     return result;
 }
 
+template<typename T>
+std::unique_ptr<Formula<T>> parseWcnf(std::string fileName, VariableNameManager& varMgr) {
+    std::ifstream f(fileName);
+    CNFParser<T> parser(varMgr);
+    std::unique_ptr<Formula<T>> result = parser.parse(f, fileName);
+    return result;
+}
+
 int main(int argc, char const *argv[])
 {
 
@@ -1101,6 +1110,7 @@
     // m.def("parseOpbBigInt", &parseOpb<BigInt>, "Parse opb file with arbitrary precision.");
     m.def("parseCnf", &parseCnf<CoefType>, "Parse cnf file with fixed precision.");
     // m.def("parseCnfBigInt", &parseCnf<BigInt>, "Parse cnf file with arbitrary precision.");
+    m.def("parseWcnf", &parseWcnf<CoefType>, "Parse wcnf file with fixed precision.");
 
     m.def("parseConstraintOpb", &parseOpbConstraint<CoefType>, "Parse opb consraint with fixed precision.");
     // m.def("parseConstraintOpbBigInt", &parseOpbConstraint<BigInt>, "Parse opb constraint with arbitrary precision.");
diff -ruN src_tmp/veripb/utils.py veripb/veripb/utils.py
--- src_tmp/veripb/utils.py	2022-02-05 16:49:57.200268800 +0100
+++ veripb/veripb/utils.py	2022-02-05 16:43:30.337378100 +0100
@@ -17,7 +17,7 @@
 from veripb.parser import RuleParser
 from veripb.exceptions import ParseError
 from veripb.optimized.constraints import PropEngine as CppPropEngine
-from veripb.optimized.parsing import parseOpb,parseCnf
+from veripb.optimized.parsing import parseOpb,parseCnf, parseWcnf
 from veripb.constraints import PropEngine,CppIneqFactory
 from time import perf_counter
 
@@ -66,6 +66,7 @@
         return {
             "drat": False,
             "cnf": False,
+            "wcnf": False,
             "arbitraryPrecision": False,
             "enableFreeNames": True,
             "printStats": False
@@ -90,6 +91,12 @@
             help="Process CNF with PB proof.",
             action="store_true", dest=name+".cnf", default=False
         )
+        
+        group.add_argument(
+            '--wcnf',
+            help="Process WCNF with PB proof. ", #TODO: write about assumption on the variable names.
+            action="store_true", dest=name+".wcnf", default=False
+        )
 
         group.add_argument("--arbitraryPrecision",
             action="store_true",
@@ -153,6 +160,8 @@
 
     if miscSettings.drat or miscSettings.cnf:
         parser = parseCnf
+    elif miscSettings.wcnf:
+        parser = parseWcnf
     else:
         parser = parseOpb
 
