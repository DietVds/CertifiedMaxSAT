diff -ruN src_tmp/core/Main.C src/core/Main.C
--- src_tmp/core/Main.C	2021-12-22 19:18:12.077360718 +0100
+++ src/core/Main.C	2021-12-22 16:46:12.272354140 +0100
@@ -27,6 +27,7 @@
 #include <zlib.h>
 
 #include "Solver.h"
+#include "Prooflogger.h"
 
 /*************************************************************************************/
 #ifdef _MSC_VER
@@ -131,18 +132,18 @@
     return neg ? -val : val; }
 
 template<class B>
-static void readClause(B& in, Solver& S, vec<Lit>& lits, 
+static void readClause(B& in, Solver& S, Prooflogger& PL, vec<Lit>& lits, 
 		       int nbvar, int top, int& nbsoft) { // koshi 10.01.04
 
-    int     parsed_lit, var;
+    int parsed_lit, var, weight;
     lits.clear();
-    parsed_lit = parseInt(in); // koshi 10.01.04
-    if (parsed_lit == 1) { // soft clause
+    weight = parseInt(in); // koshi 10.01.04
+    if (weight == 1) { // soft clause
       nbsoft++;
       lits.push(Lit(S.newVar()));
-    } else if (parsed_lit != top) { // weight of hard clause must be top
+    } else if (weight != top) { // weight of hard clause must be top
       reportf("Unexpected weight %c\n", *in), exit(3);
-    }
+    } else weight = top;
 
     for (;;){
         parsed_lit = parseInt(in);
@@ -151,6 +152,9 @@
 	// koshi 10.01.04        while (var >= S.nVars()) S.newVar();
         lits.push( (parsed_lit > 0) ? Lit(var) : ~Lit(var) );
     }
+
+    // Write the clause to the OPB file
+    PL.write_OPB_constraint(lits, weight);
 }
 
 template<class B>
@@ -163,42 +167,52 @@
 
 
 template<class B>
-static void parse_DIMACS_main(B& in, Solver& S, 
+static void parse_DIMACS_main(B& in, Solver& S, Prooflogger &PL, 
 			      int& out_nbvar, int& out_top, int& out_nbsoft) {
     vec<Lit> lits;
+    int vars, clauses;
+
+    // Read header
+    skipWhitespace(in);
+    if (*in == 'p'){
+	     if (match(in, "p wcnf")){ // koshi 10.01.04
+            vars    = parseInt(in);
+            clauses = parseInt(in);
+		    int top     = parseInt(in);
+		    out_nbvar   = vars;
+		    out_top     = top;
+            reportf("|  Number of variables:    %-12d                                       |\n", vars);
+            reportf("|  Number of clauses:      %-12d                                       |\n", clauses);
+            reportf("|  Weight of hard clauses: %-12d                                       |\n", top);
+		    while (vars > S.nVars()) S.newVar();
+        } else {
+            reportf("PARSE ERROR! Unexpected char: %c\n", *in), exit(3);
+        }
+    } else reportf("PARSE ERROR! No header given!");
+
+    // Read clauses
     for (;;){
         skipWhitespace(in);
         if (*in == EOF)
             break;
-        else if (*in == 'p'){
-	  if (match(in, "p wcnf")){ // koshi 10.01.04
-                int vars    = parseInt(in);
-                int clauses = parseInt(in);
-		int top     = parseInt(in);
-		out_nbvar   = vars;
-		out_top     = top;
-                reportf("|  Number of variables:    %-12d                                       |\n", vars);
-                reportf("|  Number of clauses:      %-12d                                       |\n", clauses);
-                reportf("|  Weight of hard clauses: %-12d                                       |\n", top);
-		while (vars > S.nVars()) S.newVar();
-            }else{
-                reportf("PARSE ERROR! Unexpected char: %c\n", *in), exit(3);
-            }
-        } else if (*in == 'c' || *in == 'p')
-            skipLine(in);
-        else
-	  readClause(in, S, lits, out_nbvar,out_top,out_nbsoft),
+        else if (*in == 'c' || *in == 'p') skipLine(in);
+        else {
+	        readClause(in, S, PL, lits, out_nbvar,out_top,out_nbsoft),
             S.addClause(lits);
+        }
     }
     reportf("|  Number of soft clauses: %-12d                                       |\n", out_nbsoft);
+    PL.write_proof_header(clauses);
+    PL.write_OPB_header(vars, clauses);
+    PL.write_minimise(out_nbvar, out_nbsoft);
 }
 
 // Inserts problem into solver.
 //
-static void parse_DIMACS(gzFile input_stream, Solver& S, 
+static void parse_DIMACS(gzFile input_stream, Solver& S, Prooflogger &PL, 
 			 int& out_nbvar, int& out_top, int& out_nbsoft) { // koshi 10.01.04
     StreamBuffer in(input_stream);
-    parse_DIMACS_main(in, S, out_nbvar, out_top, out_nbsoft); }
+    parse_DIMACS_main(in, S, PL, out_nbvar, out_top, out_nbsoft); }
 
 
 //=================================================================================================
@@ -236,6 +250,7 @@
     reportf("  -decay         = <num> [ 0 - 1 ]\n");
     reportf("  -rnd-freq      = <num> [ 0 - 1 ]\n");
     reportf("  -verbosity     = {0,1,2}\n");
+    reportf("  -proof-file    = /path/to/proof_file.proof (default: maxsat_proof.proof)");
     reportf("\n");
 }
 
@@ -249,52 +264,68 @@
         return NULL;
 }
 
+
+
 // koshi 10.01.08
 void genCardinals(int from, int to, 
-		  Solver& S, vec<Lit>& lits, vec<Lit>& linkingVar) {
+		  Solver& S, Prooflogger& PL, vec<Lit>& lits, vec<Lit>& linkingVar) {
   int inputSize = to - from + 1;
   linkingVar.clear();
 
+  PL.write_comment("-------------------------------------------");
+  PL.write_comment("New node:");
+
   vec<Lit> linkingAlpha;
   vec<Lit> linkingBeta;
 
   Var varZero = S.newVar();
   Var varLast = S.newVar();
 
+  // First
   lits.clear(); lits.push(Lit(varZero)); S.addClause(lits);
+  PL.write_comment("- First variable:");
+  PL.write_sub_red(lits, true);
+
+  // Last
   lits.clear(); lits.push(~Lit(varLast)); S.addClause(lits);
+  PL.write_comment("- Last variable:");
+  PL.write_sub_red(lits, false);
+
 
   if (inputSize > 2) {
     int middle = inputSize/2;
-    genCardinals(from, from+middle, S,lits,linkingAlpha);
-    genCardinals(from+middle+1, to, S,lits,linkingBeta);
+    genCardinals(from, from+middle, S,PL,lits,linkingAlpha);
+    genCardinals(from+middle+1, to, S,PL,lits,linkingBeta);
   } else if (inputSize == 2) {
-    genCardinals(from, from, S,lits,linkingAlpha);
-    genCardinals(to, to, S,lits,linkingBeta);
+    genCardinals(from, from, S,PL,lits,linkingAlpha);
+    genCardinals(to, to, S,PL,lits,linkingBeta);
   }
   if (inputSize == 1) {
     linkingVar.push(Lit(varZero));
     linkingVar.push(Lit(from));
     linkingVar.push(Lit(varLast));
   } else { // inputSize >= 2
+    PL.write_comment("- Node clauses:");
     linkingVar.push(Lit(varZero));
     for (int i = 0; i < inputSize; i++) linkingVar.push(Lit(S.newVar()));
     linkingVar.push(Lit(varLast));
     for (int sigma = 0; sigma <= inputSize; sigma++) {
       for (int alpha = 0; alpha < linkingAlpha.size()-1; alpha++) {
-	int beta = sigma - alpha;
-	if (0 <= beta && beta < linkingBeta.size()-1) { // create constraints
-	  lits.clear();
-	  lits.push(~linkingAlpha[alpha]);
-	  lits.push(~linkingBeta[beta]);
-	  lits.push(linkingVar[sigma]);
-	  S.addClause(lits);
-	  lits.clear();
-	  lits.push(linkingAlpha[alpha+1]);
-	  lits.push(linkingBeta[beta+1]);
-	  lits.push(~linkingVar[sigma+1]);
-	  S.addClause(lits);
-	}
+	    int beta = sigma - alpha;
+	    if (0 <= beta && beta < linkingBeta.size()-1) { // create constraints
+	      lits.clear();
+	      lits.push(linkingVar[sigma]);
+	      lits.push(~linkingAlpha[alpha]);
+	      lits.push(~linkingBeta[beta]);
+          PL.write_sub_red(lits, true);
+	      S.addClause(lits);
+	      lits.clear();
+	      lits.push(~linkingVar[sigma+1]);
+	      lits.push(linkingAlpha[alpha+1]);
+	      lits.push(linkingBeta[beta+1]);
+          PL.write_sub_red(lits, false);
+	      S.addClause(lits);
+	    }
       }
     }
   }
@@ -304,10 +335,10 @@
 
 int main(int argc, char** argv)
 {
-    Solver      S;
+    Prooflogger PL;
+    Solver      S(&PL);
     S.verbosity = 1;
 
-
     int         i, j;
     const char* value;
     for (i = j = 0; i < argc; i++){
@@ -347,6 +378,12 @@
             printUsage(argv);
             exit(0);
 
+        } else if ((value = hasPrefix(argv[i], "-proof-file="))) {
+            PL.set_proof_name(value);
+
+        } else if ((value = hasPrefix(argv[i], "-opb-file="))) {
+            PL.set_OPB_name(value);
+
         }else if (strncmp(argv[i], "-", 1) == 0){
             reportf("ERROR! unknown flag %s\n", argv[i]);
             exit(0);
@@ -357,7 +394,7 @@
     argc = j;
 
 
-    reportf("This is QMaxSAT 0.1 based on MiniSat 2.0 beta\n");
+    reportf("This is QMaxSAT 0.1 based on MiniSat 2.0 beta, extended for prooflogging\n");
 #if defined(__linux__)
     fpu_control_t oldcw, newcw;
     _FPU_GETCW(oldcw); newcw = (oldcw & ~_FPU_EXTENDED) | _FPU_DOUBLE; _FPU_SETCW(newcw);
@@ -376,6 +413,12 @@
     if (in == NULL)
         reportf("ERROR! Could not open file: %s\n", argc == 1 ? "<stdin>" : argv[1]), exit(1);
 
+    // Open proof file
+    PL.open_proof();
+
+    // Open OPB file
+    PL.open_OPB();
+
     reportf("============================[ Problem Statistics ]=============================\n");
     reportf("|                                                                             |\n");
 
@@ -383,8 +426,18 @@
     int nbvar  = 0; // number of original variables
     int top    = 0; // weight of hard clause
     int nbsoft = 0; // number of soft clauses
-    parse_DIMACS(in, S, nbvar, top, nbsoft);
+    parse_DIMACS(in, S, PL, nbvar, top, nbsoft);
+    
+    // Initialise PL constraint counter
+    PL.constraint_counter = S.nClauses();
+
+    // Close input file
     gzclose(in);
+
+    // Close written OPB file
+    PL.close_OPB();
+
+    // Open output file
     FILE* res = (argc >= 3) ? fopen(argv[2], "wb") : NULL;
 
     double parse_time = cpuTime() - cpu_time;
@@ -393,6 +446,8 @@
     if (!S.simplify()){
         reportf("Solved by unit propagation\n");
         if (res != NULL) fprintf(res, "UNSAT\n"), fclose(res);
+        PL.derived_empty_clause();
+        PL.close_proof();
         printf("UNSATISFIABLE\n");
         exit(20);
     }
@@ -407,21 +462,39 @@
       lcnt++;
       int answerNew = 0;
       for (int i = nbvar; i < nbvar+nbsoft; i++) // count the number of
-	if (S.model[i] == l_True) answerNew++;   // unsatisfied soft clauses
-      if (lcnt == 1) { // first model: generate cardinal constraints
-	genCardinals(nbvar,nbvar+nbsoft-1, S,lits,linkingVar);
-	for (int i = answerNew; i < linkingVar.size()-1; i++) {
-	  lits.clear();
-	  lits.push(~linkingVar[i]);
-	  S.addClause(lits);
-	}
-	answer = answerNew;
-      } else { // lcnt > 1 
-	for (int i = answerNew; i < answer; i++) {
-	  lits.clear();
-	  lits.push(~linkingVar[i]);
-	  S.addClause(lits);
+	    if (S.model[i] == l_True) answerNew++;   // unsatisfied soft clauses
+      if (lcnt == 1) { // first model: generate cardinality constraints
+        PL.write_comment("==============================================================");
+        PL.write_comment("First model found:"); 
+        PL.write_bound_update(S.model);
+        PL.write_comment("==============================================================");
+        PL.write_comment("Cardinality encoding:"); 
+	    genCardinals(nbvar,nbvar+nbsoft-1, S,PL,lits,linkingVar);
+        //PL.write_comment("==============================================================");
+        //PL.write_comment("Linking variables order:"); 
+        //PL.write_order(linkingVar);
+        PL.write_comment("==============================================================");
+        PL.write_comment("Constraining through linking variables:"); 
+	    for (int i = answerNew; i < linkingVar.size()-1; i++) {
+	      lits.clear();
+	      lits.push(~linkingVar[i]);
+          PL.write_learnt_clause(lits);
+	      S.addClause(lits);
+	    }
+        answer = answerNew;
+    } else { // lcnt > 1 
+        PL.write_comment("==============================================================");
+        PL.write_comment("New model found:"); 
+        PL.write_bound_update(S.model);
+        PL.write_comment("==============================================================");
+        PL.write_comment("Constraining through linking variables:"); 
+	    for (int i = answerNew; i < answer; i++) {
+	      lits.clear();
+	      lits.push(~linkingVar[i]);
+          PL.write_learnt_clause(lits);
+	      S.addClause(lits);
 	}
+
 	answer = answerNew;
       }
       reportf("Current answer = %d\n",answer);
@@ -439,8 +512,10 @@
                 if (S.model[i] != l_Undef)
                     fprintf(res, "%s%s%d", (i==0)?"":" ", (S.model[i]==l_True)?"":"-", i+1);
             fprintf(res, " 0\n");
-        }else
+        } else
             fprintf(res, "UNSAT\n");
+        PL.write_comment("==============================================================\n");
+        PL.close_proof();
         fclose(res);
     }
 
diff -ruN src_tmp/core/Prooflogger.C src/core/Prooflogger.C
--- src_tmp/core/Prooflogger.C	1970-01-01 01:00:00.000000000 +0100
+++ src/core/Prooflogger.C	2021-12-22 19:18:08.557349289 +0100
@@ -0,0 +1,178 @@
+#include "Prooflogger.h"
+
+//=================================================================================================
+// Proof writing methods
+
+
+void Prooflogger::write_proof_header(int nbclause) {
+    proof_file << "pseudo-Boolean proof version 1.0\n";
+    proof_file << "f " << nbclause << "\n";
+}
+
+void Prooflogger::write_order(vec<Lit>& linkingVar) {
+    proof_file << "pre_order exp2\n";
+
+    // Auxiliairy variables
+    proof_file << "     vars\n";
+    proof_file << "         left ";
+    for(int i = 0; i < linkingVar.size(); i++) {
+        proof_file << "u" << i + 1 << " ";
+    }
+    proof_file << "\n         right ";
+    for(int i = 0; i < linkingVar.size(); i++) {
+        proof_file << "v" << i + 1 << " ";
+    }
+    proof_file << "\n         aux";
+    proof_file << "\n     end\n";
+
+    // Constraint
+    proof_file << "     def\n       ";
+    int current_weight = 1;
+    for(int i = linkingVar.size(); i > 0; i--) {
+        proof_file << "-" << current_weight << " u" << i << " ";
+        proof_file << current_weight << " v" << i << " ";
+        current_weight = current_weight * 2;
+    }
+    proof_file << " >= 0;\n";
+    proof_file << "     end\n\n";
+
+    // Transitivity proof
+    proof_file << "     transitivity\n";
+    proof_file << "         vars\n";
+    proof_file << "             fresh_right ";
+    for(int i = 0; i < linkingVar.size(); i++) {
+        proof_file << "w" << i + 1 << " ";
+    }
+    proof_file << "\n         end\n";
+    proof_file << "         proof\n";
+    proof_file << "             proofgoal #1\n";
+    proof_file << "                 p 1 2 + 3 +\n";
+    proof_file << "                 c -1\n";
+    proof_file << "             qed\n";
+    proof_file << "         qed\n";
+    proof_file << "     end\n";
+    proof_file << "end\n";
+
+    // Load
+    proof_file << "load_order exp2 ";
+    for(int i = 0; i < linkingVar.size(); i++) {
+        proof_file << "y" << var(linkingVar[i])+1 << " ";
+    }
+    proof_file << "\n";
+}
+
+void Prooflogger::write_comment(const char* comment) {
+    proof_file << "* " << comment << "\n";
+}
+
+void Prooflogger::derived_empty_clause() {
+    proof_file << "u >= 1;\n";
+    constraint_counter++;
+    write_contradiction();
+}
+
+const char* Prooflogger::literal_symbol(Lit lit) {
+    std::cout << var(lit) +1 << "\n";
+    if(var(lit) + 1 > formula_length + n_variables) return "y";
+    else return "x";
+}
+
+void Prooflogger::write_sub_red(vec<Lit>& definition, bool ass) {
+    const char* symbol;
+    proof_file << "red ";
+    for (int i = 0; i < definition.size(); i++) {
+        symbol = literal_symbol(definition[i]);
+        if (sign(definition[i]) == 1)
+            proof_file << "1 ~" << symbol << var(definition[i]) + 1 << " ";
+        else
+            proof_file << "1 " << symbol << var(definition[i]) + 1 << " ";
+    }
+    proof_file << " >= 1; y" << var(definition[0])+1 << " -> " << ass << "\n";
+    constraint_counter++;
+}
+
+void Prooflogger::write_dom(vec<Lit>& linkingVar, int start, int stop) {
+    proof_file << "dom ";
+
+    // Constraint
+    for(int i = start; i < stop; i++) {
+        proof_file << "1 ~y" << var(linkingVar[i]) + 1 << " ";
+    }
+    proof_file << ">= " << stop - start << "; ";
+
+    // Witness
+    for(int i = start; i < stop; i++) {
+        proof_file << "y" << var(linkingVar[i]) + 1 << " -> 0 ";
+
+    }
+    proof_file << "\n";
+
+    // TODO: subproof 
+    constraint_counter++;
+}
+
+void Prooflogger::write_bound_update(vec<lbool>& model) {
+    proof_file << "o ";
+
+    for(int i = 0; i < model.size(); i++) {
+        if(model[i] == l_True) proof_file << "x" << i+1 << " ";
+        else if(model[i] == l_False) proof_file << "~x" << i+1 << " ";
+    }
+    proof_file << "\n";
+
+    // Veripb automatically adds an improvement constraint so counter needs to be incremented
+    constraint_counter++;
+}
+
+void Prooflogger::write_learnt_clause(vec<Lit>& clause) {
+    const char* symbol;
+    proof_file << "u ";
+    for (int i = 0; i < clause.size(); i++) {
+        symbol = literal_symbol(clause[i]);
+        if (sign(clause[i]) == 1)
+            proof_file << "1 ~" << symbol << var(clause[i]) + 1 << " ";
+        else
+            proof_file << "1 " << symbol << var(clause[i]) + 1 << " ";
+    }
+    proof_file << " >= 1;\n";
+    constraint_counter++;
+}
+
+void Prooflogger::write_contradiction() {
+    proof_file << "c " << constraint_counter << "\n";
+}
+
+void Prooflogger::write_delete(int number) {
+    proof_file << "d " << number << "\n";
+    constraint_counter--;
+}
+
+//=================================================================================================
+// OPB writing methods
+
+void Prooflogger::write_OPB_header(int nbvar, int nbclause) {
+    formula_length = nbclause;
+    n_variables = nbvar;
+    OPB_file << "* #variable= " << nbvar+nbclause << " #constraint= " << nbclause << "\n";
+    OPB_file << "*\n* This MaxSAT instance was automatically generated.\n*\n";
+}
+
+void Prooflogger::write_minimise(int start_var, int num) {
+    if(num > 0) {
+        OPB_file << "min: ";
+        for(int i = start_var+1; i < start_var+num+1; i++) {
+            OPB_file << "1 x" << i << " ";
+        } 
+        OPB_file << ";\n";
+    }
+}
+
+void Prooflogger::write_OPB_constraint(vec<Lit>& constraint, int weight) {
+    for (int i = 0; i < constraint.size(); i++) {
+        if (sign(constraint[i]) == 1)
+            constraints << "1 ~x" << var(constraint[i]) + 1 << " ";
+        else
+            constraints << "1 x" << var(constraint[i]) + 1 << " ";
+    }
+    constraints << " >= " << weight << " ;\n";
+}
diff -ruN src_tmp/core/Prooflogger.h src/core/Prooflogger.h
--- src_tmp/core/Prooflogger.h	1970-01-01 01:00:00.000000000 +0100
+++ src/core/Prooflogger.h	2021-12-22 19:17:30.389225314 +0100
@@ -0,0 +1,66 @@
+#ifndef Prooflogger_h
+#define Prooflogger_h
+
+#include <cstdio>
+#include <fstream>
+#include <iostream>
+#include <sstream>
+
+#include "Vec.h"
+#include "Heap.h"
+#include "Alg.h"
+
+#include "SolverTypes.h"
+
+
+//=================================================================================================
+// Prooflogger -- the main class:
+
+
+class Prooflogger {
+public:
+
+    // Formula number of clauses and number of variables
+    //
+    int formula_length = 0;
+    int n_variables = 0;
+
+    // Constraint counter
+    //
+    int constraint_counter = 0;
+
+    // Proof file
+    std::ofstream proof_file;
+    const char *proof_file_name = "maxsat_proof.proof";
+    void open_proof                 ()                 {proof_file.open(proof_file_name);};
+    void close_proof                ()                 {proof_file.close();};
+    void set_proof_name             (const char* name) {proof_file_name = name;};
+
+    void write_proof_header         (int nbclause);
+    void write_order                (vec<Lit>& linkingVarint);
+    void write_comment              (const char* comment);
+    void derived_empty_clause       ();
+    const char* literal_symbol      (Lit lit); 
+    void write_learnt_clause        (vec<Lit>& clause);
+    void write_sub_red              (vec<Lit>& definition, bool ass);
+    void write_dom                  (vec<Lit>& linkingVar, int start, int stop); 
+    void write_bound_update         (vec<lbool>& model); 
+    void write_constraint           (vec<Lit>& clause);
+    void write_contradiction        ();
+    void write_delete               (int number);
+
+    // OPB file
+    std::ofstream OPB_file;
+    std::stringstream constraints;
+    const char *OPB_file_name = "maxsat_problem.opb";
+    void open_OPB                 ()                   {OPB_file.open(OPB_file_name);};
+    void close_OPB                ()                   {OPB_file << constraints.rdbuf(); OPB_file.close();};
+    void set_OPB_name             (const char* name)   {OPB_file_name = name;};
+
+    void write_OPB_header         (int nbvar, int nbclause);
+    void write_minimise           (int start_var, int num);
+    void write_OPB_constraint     (vec<Lit>& constraint, int weight);
+};
+
+//=================================================================================================
+#endif
\ No newline at end of file
diff -ruN src_tmp/core/Solver.C src/core/Solver.C
--- src_tmp/core/Solver.C	2021-12-22 19:18:12.077360718 +0100
+++ src/core/Solver.C	2021-12-22 16:00:12.341568535 +0100
@@ -26,7 +26,7 @@
 // Constructor/Destructor:
 
 
-Solver::Solver() :
+Solver::Solver(Prooflogger *PL) :
 
     // Parameters: (formerly in 'SearchParams')
     var_decay(1 / 0.95), clause_decay(1 / 0.999), random_var_freq(0.02)
@@ -53,6 +53,10 @@
   , random_seed      (91648253)
   , progress_estimate(0)
   , remove_satisfied (true)
+
+  // Prooflogger
+  //
+  , PL(PL)
 {}
 
 
@@ -544,7 +548,7 @@
 |    all variables are decision variables, this means that the clause set is satisfiable. 'l_False'
 |    if the clause set is unsatisfiable. 'l_Undef' if the bound on number of conflicts is reached.
 |________________________________________________________________________________________________@*/
-lbool Solver::search(int nof_conflicts, int nof_learnts)
+lbool Solver::search(int nof_conflicts, int nof_learnts) 
 {
     assert(ok);
     int         backtrack_level;
@@ -560,12 +564,19 @@
         if (confl != NULL){
             // CONFLICT
             conflicts++; conflictC++;
-            if (decisionLevel() == 0) return l_False;
+            if (decisionLevel() == 0) {
+                PL->derived_empty_clause();
+                return l_False;
+            }
 
             first = false;
 
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level);
+
+            // Write the learnt clause to the proof file
+            PL->write_learnt_clause(learnt_clause);
+
             cancelUntil(backtrack_level);
             assert(value(learnt_clause[0]) == l_Undef);
 
@@ -592,8 +603,10 @@
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())
+            if (decisionLevel() == 0 && !simplify()) {
+                PL->derived_empty_clause();
                 return l_False;
+            }
 
             if (nof_learnts >= 0 && learnts.size()-nAssigns() >= nof_learnts)
                 // Reduce the set of learnt clauses:
@@ -654,7 +667,10 @@
     model.clear();
     conflict.clear();
 
-    if (!ok) return false;
+    if (!ok) {
+        PL->derived_empty_clause();
+        return false;
+    }
 
     assumps.copyTo(assumptions);
 
diff -ruN src_tmp/core/Solver.h src/core/Solver.h
--- src_tmp/core/Solver.h	2021-12-22 19:18:12.077360718 +0100
+++ src/core/Solver.h	2021-12-01 11:33:19.867138205 +0100
@@ -21,12 +21,15 @@
 #define Solver_h
 
 #include <cstdio>
+#include <fstream>
+#include <iostream>
 
 #include "Vec.h"
 #include "Heap.h"
 #include "Alg.h"
 
 #include "SolverTypes.h"
+#include "Prooflogger.h"
 
 
 //=================================================================================================
@@ -38,9 +41,13 @@
 
     // Constructor/Destructor:
     //
-    Solver();
+    Solver(Prooflogger *PL);
     ~Solver();
 
+    // Proof logging:
+    //
+    Prooflogger* PL;
+
     // Problem specification:
     //
     Var     newVar    (bool polarity = true, bool dvar = true); // Add a new variable with parameters specifying variable mode.
@@ -146,19 +153,19 @@
 
     // Main internal methods:
     //
-    void     insertVarOrder   (Var x);                                                 // Insert a variable in the decision order priority queue.
-    Lit      pickBranchLit    (int polarity_mode, double random_var_freq);             // Return the next decision variable.
-    void     newDecisionLevel ();                                                      // Begins a new decision level.
-    void     uncheckedEnqueue (Lit p, Clause* from = NULL);                            // Enqueue a literal. Assumes value of literal is undefined.
-    bool     enqueue          (Lit p, Clause* from = NULL);                            // Test if fact 'p' contradicts current state, enqueue otherwise.
-    Clause*  propagate        ();                                                      // Perform unit propagation. Returns possibly conflicting clause.
-    void     cancelUntil      (int level);                                             // Backtrack until a certain level.
-    void     analyze          (Clause* confl, vec<Lit>& out_learnt, int& out_btlevel); // (bt = backtrack)
-    void     analyzeFinal     (Lit p, vec<Lit>& out_conflict);                         // COULD THIS BE IMPLEMENTED BY THE ORDINARIY "analyze" BY SOME REASONABLE GENERALIZATION?
-    bool     litRedundant     (Lit p, uint32_t abstract_levels);                       // (helper method for 'analyze()')
-    lbool    search           (int nof_conflicts, int nof_learnts);                    // Search for a given number of conflicts.
-    void     reduceDB         ();                                                      // Reduce the set of learnt clauses.
-    void     removeSatisfied  (vec<Clause*>& cs);                                      // Shrink 'cs' to contain only non-satisfied clauses.
+    void     insertVarOrder   (Var x);                                                  // Insert a variable in the decision order priority queue.
+    Lit      pickBranchLit    (int polarity_mode, double random_var_freq);              // Return the next decision variable.
+    void     newDecisionLevel ();                                                       // Begins a new decision level.
+    void     uncheckedEnqueue (Lit p, Clause* from = NULL);                             // Enqueue a literal. Assumes value of literal is undefined.
+    bool     enqueue          (Lit p, Clause* from = NULL);                             // Test if fact 'p' contradicts current state, enqueue otherwise.
+    Clause*  propagate        ();                                                       // Perform unit propagation. Returns possibly conflicting clause.
+    void     cancelUntil      (int level);                                              // Backtrack until a certain level.
+    void     analyze          (Clause* confl, vec<Lit>& out_learnt, int& out_btlevel);  // (bt = backtrack)
+    void     analyzeFinal     (Lit p, vec<Lit>& out_conflict);                          // COULD THIS BE IMPLEMENTED BY THE ORDINARIY "analyze" BY SOME REASONABLE GENERALIZATION?
+    bool     litRedundant     (Lit p, uint32_t abstract_levels);                        // (helper method for 'analyze()')
+    lbool    search           (int nof_conflicts, int nof_learnts);                     // Search for a given number of conflicts.
+    void     reduceDB         ();                                                       // Reduce the set of learnt clauses.
+    void     removeSatisfied  (vec<Clause*>& cs);                                       // Shrink 'cs' to contain only non-satisfied clauses.
 
     // Maintaining Variable/Clause activity:
     //
